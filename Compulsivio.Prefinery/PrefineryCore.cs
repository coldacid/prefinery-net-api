using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Web;
using System.Xml;

namespace Compulsivio.Prefinery
{
    /// <summary>
    /// Repository and API manager for Prefinery betas.
    /// </summary>
    public class PrefineryCore
    {
        /// <summary>
        /// Initializes a new instance of the PrefineryCore class.
        /// </summary>
        /// <param name="betaId">The identification number for the attached beta.</param>
        /// <param name="betaName">The account/beta name as it appears in the Prefinery API calls.</param>
        /// <param name="apiKey">The API key for the Prefinery account.</param>
        /// <param name="decodeKey">The decoding key for processing valid tester e-mail addresses.</param>
        public PrefineryCore(int betaId, string betaName, string apiKey, string decodeKey)
        {
            this.BetaId = betaId;
            this.BetaName = betaName;
            this.ApiKey = apiKey;
            this.DecodeKey = decodeKey;
        }

        /// <summary>
        /// Current state of the BuildTester state machine.
        /// </summary>
        private enum GetTesterState
        {
            /// <summary>Not currently within a &lt;tester&gt; element.</summary>
            None,

            /// <summary>Currently within a &lt;tester&gt; element, but not &lt;profile&gt;.</summary>
            InTester,

            /// <summary>Currently within a &lt;profile&gt; element</summary>
            InProfile
        }

        /// <summary>
        /// Gets the identification number of the beta, as used by the Prefinery API.
        /// </summary>
        public int BetaId { get; private set; }

        /// <summary>
        /// Gets the account/beta name as it appears in the Prefinery API calls. 
        /// </summary>
        public string BetaName { get; private set; }

        /// <summary>
        /// Gets the API key for the Prefinery account.
        /// </summary>
        public string ApiKey { get; private set; }

        /// <summary>
        /// Gets the decoding key for processing valid tester e-mail addresses.
        /// </summary>
        public string DecodeKey { get; private set; }

        /// <summary>
        /// Check if a given invite code is valid for a given e-mail address.
        /// </summary>
        /// <param name="email">The e-mail address provided.</param>
        /// <param name="invite">The invite code provided.</param>
        /// <returns><value>true</value> if the invite code is valid; <value>false</value> otherwise.</returns>
        /// <remarks>
        /// If this function returns false, it's possible that the invite code is valid. This function does not
        /// contact Prefinery for its check, and is only useful as a shortcut if you are not using any special
        /// invite codes, but rather just those generated by Prefinery itself.
        /// </remarks>
        /// <exception cref="T:System.ArgumentNullException">No e-mail address provided.</exception>
        /// <exception cref="T:System.ArgumentNullException">No invite code provided.</exception>
        public bool IsValidInviteCode(string email, string invite)
        {
            if (string.IsNullOrEmpty(email))
            {
                throw new ArgumentNullException("email");
            }

            if (string.IsNullOrEmpty(invite))
            {
                throw new ArgumentNullException("invite");
            }

            return this.EncodeEmail(email).Equals(invite);
        }

        /// <summary>
        /// Return the <see cref="T:Compulsivio.Prefinery.Tester"/> with a given ID number.
        /// </summary>
        /// <param name="id">The ID number of the tester to return.</param>
        /// <returns>A <see cref="T:Compulsivio.Prefinery.Tester"/> with the given ID number.</returns>
        public Tester GetTester(int id)
        {
            // build our request
            var request = WebRequest.Create(
                string.Format("http://{0}.prefinery.com/api/v1/betas/{1}/testers/{3}.xml?api_key={2}", this.BetaName, this.BetaId, this.ApiKey, id))
                as HttpWebRequest;
            request.Method = "GET";

            // execute the request and return the first result
            return this.ProcessTesterRequest(request).First();
        }

        /// <summary>
        /// Return the <see cref="T:Compulsivio.Prefinery.Tester"/> with a given e-mail address.
        /// </summary>
        /// <param name="email">The e-mail address associated with the tester.</param>
        /// <returns>A <see cref="T:Compulsivio.Prefinery.Tester"/> with the given e-mail address.</returns>
        public Tester GetTester(string email)
        {
            // build our request
            var request = WebRequest.Create(
                string.Format("http://{0}.prefinery.com/api/v1/betas/{1}/testers.xml?api_key={2}&email={3}", this.BetaName, this.BetaId, this.ApiKey, email))
                as HttpWebRequest;
            request.Method = "GET";

            // execute the request and return the first result
            return this.ProcessTesterRequest(request).First();
        }

        /// <summary>
        /// Request a list of all testers associated with a beta.
        /// </summary>
        /// <returns>An enumerable list of <see cref="T:Compulsivio.Prefinery.Tester"/>s.</returns>
        public IEnumerable<Tester> GetTesters()
        {
            // build our request
            var request = WebRequest.Create(
                string.Format("http://{0}.prefinery.com/api/v1/betas/{1}/testers.xml?api_key={2}", this.BetaName, this.BetaId, this.ApiKey))
                as HttpWebRequest;
            request.Method = "GET";

            // execute the request and return the results
            return this.ProcessTesterRequest(request);
        }

        /// <summary>
        /// Add a tester to Prefinery.
        /// </summary>
        /// <param name="tester">The <see cref="T:Compulsivio.Prefinery.Tester"/> to add.</param>
        /// <exception cref="T:System.InvalidOperationException"><paramref name="tester"/> has already been added.</exception>
        /// <exception cref="T:System.ArgumentException"><paramref name="tester"/> is missing an email address.</exception>
        /// <exception cref="T:System.ArgumentException"><paramref name="tester"/> cannot be added with an initial status of Rejected.</exception>
        public void AddTester(Tester tester)
        {
            // make sure we're doing the right thing
            if (tester.Id.HasValue)
            {
                throw new InvalidOperationException("Tester has Id and so has already been added");
            }

            if (string.IsNullOrEmpty(tester.Email))
            {
                throw new ArgumentException("Tester needs email address before it can be added");
            }

            if (tester.Status == TesterStatus.Rejected)
            {
                throw new ArgumentException("Tester must be added before it can be rejected");
            }

            // build our request
            var request = WebRequest.Create(
                string.Format("http://{0}.prefinery.com/api/v1/betas/{1}/testers.xml?api_key={2}", this.BetaName, this.BetaId, this.ApiKey))
                as HttpWebRequest;
            request.Method = "POST";

            request.ContentType = "text/xml";
            using (var stream = request.GetRequestStream())
            {
                using (var writer = new System.IO.StreamWriter(stream, new UTF8Encoding()))
                {
                    writer.WriteLine("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                    writer.WriteLine("<tester>");
                    writer.WriteLine("<email>{0}</email>", tester.Email);

                    if (!string.IsNullOrEmpty(tester.InviteCode))
                    {
                        writer.WriteLine("<invitation-code>{0}</invitation-code>", tester.InviteCode);
                    }

                    if (tester.Status != TesterStatus.Unknown)
                    {
                        writer.WriteLine("<status>{0}</status>", tester.Status.ToString().ToLower());
                    }

                    if (tester.Profile.Count > 0)
                    {
                        writer.WriteLine("<profile>");
                        foreach (var pair in tester.Profile)
                        {
                            writer.WriteLine("<{0}>{1}</{0}>", pair.Key, pair.Value);
                        }

                        writer.WriteLine("</profile>");
                    }

                    writer.WriteLine("</tester>");
                }
            }

            // execute the request and return the first result
            this.ReplaceTesterWithTemp(tester, this.ProcessTesterRequest(request).First());
        }

        /// <summary>
        /// Send a <see cref="T:Compulsivio.Prefinery.Tester"/>'s changes to Prefinery.
        /// </summary>
        /// <param name="tester">The <see cref="T:Compulsivio.Prefinery.Tester"/> whose changes are to be sent.</param>
        /// <exception cref="T:System.InvalidOperationException"><paramref name="tester"/> is not associated with any beta.</exception>
        public void UpdateTester(Tester tester)
        {
            // make sure we're doing the right thing
            if (!tester.Id.HasValue)
            {
                throw new InvalidOperationException("Add tester before updating it");
            }

            // build our request
            var request = WebRequest.Create(
                string.Format("http://{0}.prefinery.com/api/v1/betas/{1}/testers/{3}.xml?api_key={2}", this.BetaName, this.BetaId, this.ApiKey, tester.Id))
                as HttpWebRequest;
            request.Method = "PUT";

            request.ContentType = "text/xml";
            using (var stream = request.GetRequestStream())
            {
                using (var writer = new System.IO.StreamWriter(stream, new UTF8Encoding()))
                {
                    writer.WriteLine("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                    writer.WriteLine("<tester>");

                    if (!string.IsNullOrEmpty(tester.Email))
                    {
                        writer.WriteLine("<email>{0}</email>", tester.Email);
                    }

                    if (tester.Status != TesterStatus.Unknown && tester.Status != TesterStatus.Applied && tester.Status != TesterStatus.Imported)
                    {
                        writer.WriteLine("<status>{0}</status>", tester.Status.ToString().ToLower());
                    }

                    if (tester.Profile.Count > 0)
                    {
                        writer.WriteLine("<profile>");
                        foreach (var pair in tester.Profile)
                        {
                            writer.WriteLine("<{0}>{1}</{0}>", pair.Key, pair.Value);
                        }

                        writer.WriteLine("</profile>");
                    }

                    writer.WriteLine("</tester>");
                }
            }

            // execute the request and return the first result
            this.ReplaceTesterWithTemp(tester, this.ProcessTesterRequest(request).First());
        }

        /// <summary>
        /// Remove a tester from its associated beta.
        /// </summary>
        /// <param name="tester">A <see cref="T:Compulsivio.Prefinery.Tester"/> to remove.</param>
        /// <exception cref="T:System.ArgumentException">The tester has not be associated with a beta.</exception>
        public void DeleteTester(Tester tester)
        {
            if (!tester.Id.HasValue)
            {
                throw new ArgumentException("Tester needs to have been added before being deleted");
            }

            this.DeleteTester(tester.Id.Value);
        }

        /// <summary>
        /// Remove a tester from its associated beta.
        /// </summary>
        /// <param name="id">Id number of the tester to remove.</param>
        /// <exception cref="T:System.Net.WebException">Something went wrong while communicating with Prefinery.</exception>
        /// <exception cref="T:Compulsivio.Prefinery.PrefineryException">Prefinery returned an error.</exception>
        public void DeleteTester(int id)
        {
            // build our request
            var request = WebRequest.Create(
                string.Format("http://{0}.prefinery.com/api/v1/betas/{1}/testers/{3}.xml?api_key={2}", this.BetaName, this.BetaId, this.ApiKey, id))
                as HttpWebRequest;
            request.Method = "DELETE";

            HttpWebResponse response = null;
            try
            {
                response = request.GetResponse() as HttpWebResponse;
            }
            catch (WebException e)
            {
                if (e.Status == WebExceptionStatus.ProtocolError && (e.Response as HttpWebResponse).StatusCode < HttpStatusCode.InternalServerError)
                {
                    response = e.Response as HttpWebResponse;
                }
                else
                {
                    throw e;
                }
            }

            // HTTP 200 means we're good; anything else means errors
            if (response.StatusCode == HttpStatusCode.OK)
            {
                return;
            }
            else
            {
                throw new PrefineryException(response.StatusDescription);
            }
        }

        /// <summary>
        /// Test if an invite code provided is valid for a given <see cref="T:Compulsivio.Prefinery.Tester"/>.
        /// </summary>
        /// <param name="tester"><see cref="T:Compulsivio.Prefinery.Tester"/> who has provided an invite code.</param>
        /// <param name="inviteCode">The invite code provided by <paramref name="tester"/>.</param>
        /// <returns><value>true</value> if the invide code is valid; <value>false</value> otherwise.</returns>
        /// <exception cref="T:System.Net.WebException">Something went wrong while communicating with Prefinery.</exception>
        public bool ValidateCode(Tester tester, string inviteCode)
        {
            // build our request
            var request = WebRequest.Create(
                string.Format("http://{0}.prefinery.com/api/v1/betas/{1}/testers/{3}/verify.xml?api_key={2}&invite_code={4}", this.BetaName, this.BetaId, this.ApiKey, tester.Id, inviteCode))
                as HttpWebRequest;
            request.Method = "GET";

            // get our response
            HttpWebResponse response = null;
            try
            {
                response = request.GetResponse() as HttpWebResponse;
            }
            catch (WebException e)
            {
                if (e.Status == WebExceptionStatus.ProtocolError && (e.Response as HttpWebResponse).StatusCode < HttpStatusCode.InternalServerError)
                {
                    response = e.Response as HttpWebResponse;
                }
                else
                {
                    throw e;
                }
            }

            // HTTP 200 means we're good; anything else means errors
            if (response.StatusCode == HttpStatusCode.OK)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Check in a tester with Prefinery.
        /// </summary>
        /// <param name="tester">A <see cref="T:Compulsivio.Prefinery.Tester"/> to check in.</param>
        /// <exception cref="T:System.ArgumentException">The provided tester is missing both Id and e-mail address.</exception>
        /// <exception cref="T:System.Net.WebException">Something went wrong while communicating with Prefinery.</exception>
        public void CheckinTester(Tester tester)
        {
            if (tester.Id.HasValue)
            {
                this.CheckinTester(tester.Id.Value);
            }
            else if (!string.IsNullOrEmpty(tester.Email))
            {
                this.CheckinTester(tester.Email);
            }
            else
            {
                throw new ArgumentException("Tester needs either an Id or email address to be checked in");
            }
        }

        /// <summary>
        /// Check in a tester with Prefinery.
        /// </summary>
        /// <param name="id">Id number of the tester to check in.</param>
        /// <exception cref="T:System.Net.WebException">Something went wrong while communicating with Prefinery.</exception>
        public void CheckinTester(int id)
        {
            // build our request
            var request = WebRequest.Create(
                string.Format("http://{0}.prefinery.com/api/v1/betas/{1}/testers/{3}/checkin.xml?api_key={2}", this.BetaName, this.BetaId, this.ApiKey, id))
                as HttpWebRequest;
            request.Method = "GET";

            // get our response
            HttpWebResponse response = null;
            try
            {
                response = request.GetResponse() as HttpWebResponse;
            }
            catch (WebException e)
            {
                if (e.Status == WebExceptionStatus.ProtocolError)
                {
                    response = e.Response as HttpWebResponse;
                }
                else
                {
                    throw e;
                }
            }

            // HTTP 200 means we're good; anything else means errors
            if (response.StatusCode == HttpStatusCode.OK)
            {
                return;
            }
            else
            {
                throw new PrefineryException(response.StatusDescription);
            }
        }

        /// <summary>
        /// Check in a tester with Prefinery.
        /// </summary>
        /// <param name="email">E-mail address of the tester to check in.</param>
        /// <exception cref="T:System.ArgumentNullException">No e-mail address provided.</exception>
        /// <exception cref="T:System.Net.WebException">Something went wrong while communicating with Prefinery.</exception>
        public void CheckinTester(string email)
        {
            if (string.IsNullOrEmpty(email))
            {
                throw new ArgumentNullException("email");
            }

            // build our request
            var request = WebRequest.Create(
                string.Format("http://{0}.prefinery.com/api/v1/betas/{1}/checkin.xml?api_key={2}", this.BetaName, this.BetaId, this.ApiKey))
                as HttpWebRequest;
            request.Method = "GET";

            request.ContentType = "text/xml";
            using (var stream = request.GetRequestStream())
            {
                using (var writer = new System.IO.StreamWriter(stream, new UTF8Encoding()))
                {
                    writer.WriteLine("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                    writer.WriteLine("<checkin>");
                    writer.WriteLine("<email>{0}</email>", email);
                    writer.WriteLine("</checkin>");
                }
            }

            // get our response
            HttpWebResponse response = null;
            try
            {
                response = request.GetResponse() as HttpWebResponse;
            }
            catch (WebException e)
            {
                if (e.Status == WebExceptionStatus.ProtocolError)
                {
                    response = e.Response as HttpWebResponse;
                }
                else
                {
                    throw e;
                }
            }

            // HTTP 200 means we're good; anything else means errors
            if (response.StatusCode == HttpStatusCode.OK)
            {
                return;
            }
            else
            {
                throw new PrefineryException(response.StatusDescription);
            }
        }

        /// <summary>
        /// Encode an e-mail address for comparing against an invite code.
        /// </summary>
        /// <param name="email">The e-mail address to encode.</param>
        /// <returns>A SHA1 hash created from the e-mail address and the beta decode key.</returns>
        private string EncodeEmail(string email)
        {
            var encoder = new ASCIIEncoding();
            var sha1 = System.Security.Cryptography.SHA1.Create();

            var bytes = encoder.GetBytes(this.DecodeKey + email.ToLower());

            var rightCode = new StringBuilder(42);
            foreach (var b in sha1.ComputeHash(bytes))
            {
                rightCode.Append(b.ToString("X2"));
            }

            return rightCode.ToString();
        }

        /// <summary>
        /// Creates a <see cref="T:Compulsivio.Prefinery.Tester"/> from a <see cref="T:System.Xml.XmlTextReader"/>.
        /// </summary>
        /// <param name="reader">The <see cref="T:System.Xml.XmlTextReader"/> to read.</param>
        /// <returns>A <see cref="T:Compulsivio.Prefinery.Tester"/> constructed from values in <paramref name="reader"/>.</returns>
        /// <exception cref="T:Compulsivio.Prefinery.PrefineryException">Unexpected XML from <paramref name="reader"/>.</exception>
        private Tester BuildTester(XmlTextReader reader)
        {
            var state = GetTesterState.InTester;
            var tester = new Tester() { Beta = this };

            while (reader.Read())
            {
                switch (state)
                {
                case GetTesterState.InTester:
                    if (reader.NodeType == XmlNodeType.EndElement && reader.Name.ToLower() == "tester")
                    {
                        return tester;
                    }

                    if (reader.NodeType == XmlNodeType.Element)
                    {
                        if (reader.Name.ToLower() == "profile")
                        {
                            state = GetTesterState.InProfile;
                            break;
                        }

                        var element = reader.Name.ToLower();
                        if (reader.Read())
                        {
                            var value = reader.Value.ToString();
                            switch (element)
                            {
                            case "email":
                                tester.Email = value;
                                break;
                            case "id":
                                int id;
                                int.TryParse(value, out id);
                                tester.Id = id;
                                break;
                            case "invitation-code":
                                tester.InviteCode = value;
                                break;
                            case "status":
                                switch (value.ToLower())
                                {
                                case "imported":
                                    tester.Status = TesterStatus.Imported; 
                                    break;
                                case "applied":
                                    tester.Status = TesterStatus.Applied;
                                    break;
                                case "invited":
                                    tester.Status = TesterStatus.Invited;
                                    break;
                                case "active":
                                    tester.Status = TesterStatus.Active;
                                    break;
                                default:
                                    tester.Status = TesterStatus.Unknown;
                                    break;
                                }

                                break;
                            case "created-at":
                            case "updated-at":
                                DateTimeOffset date;
                                DateTimeOffset.TryParse(value, out date);
                                if (element == "created-at")
                                {
                                    tester.Created = date;
                                }
                                else
                                {
                                    tester.Updated = date;
                                }

                                break;
                            default:
                                break;
                            }
                        }
                    }

                    break;

                case GetTesterState.InProfile:
                    if (reader.NodeType == XmlNodeType.EndElement && reader.Name.ToLower() == "profile")
                    {
                        state = GetTesterState.InTester;
                        break;
                    }

                    if (reader.NodeType == XmlNodeType.Element)
                    {
                        var field = reader.Name;
                        if (reader.Read())
                        {
                            tester.Profile[field] = reader.Value.ToString();
                        }
                    }

                    break;
                }
            }

            throw new PrefineryException("should never get here");
        }

        /// <summary>
        /// Execute a given <see cref="T:System.Net.HttpWebRequest"/> and produce a list of <see cref="T:Compulsivio.Prefinery.Tester"/>s
        /// from the response.
        /// </summary>
        /// <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> to execute.</param>
        /// <returns>Enumerable list of <see cref="T:Compulsivio.Prefinery.Tester"/>s returned by Prefinery.</returns>
        /// <exception cref="T:System.Net.WebException">Something went wrong during the HTTP request.</exception>
        /// <exception cref="T:Compulsivio.Prefinery.PrefineryException">The Prefinery API returned an error.</exception>
        private IEnumerable<Tester> ProcessTesterRequest(HttpWebRequest request)
        {
            // get our response
            HttpWebResponse response = null;
            try
            {
                response = request.GetResponse() as HttpWebResponse;
            }
            catch (WebException e)
            {
                if (e.Status == WebExceptionStatus.ProtocolError)
                {
                    response = e.Response as HttpWebResponse;
                }
                else
                {
                    throw e;
                }
            }

            // HTTP 200 means we're good; anything else means errors
            if (response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Created)
            {
                using (var stream = response.GetResponseStream())
                {
                    using (var reader = new XmlTextReader(stream))
                    {
                        while (reader.Read())
                        {
                            if (reader.NodeType == XmlNodeType.Element && reader.Name.ToLower() == "tester")
                            {
                                yield return this.BuildTester(reader);
                            }
                        }

                        yield break;
                    }
                }
            }

            using (var stream = response.GetResponseStream())
            {
                using (var reader = new XmlTextReader(stream))
                {
                    while (reader.Read())
                    {
                        if (reader.NodeType == XmlNodeType.Element && reader.Name.ToLower() == "error")
                        {
                            if (reader.Read())
                            {
                                throw new PrefineryException(reader.Value.ToString());
                            }
                        }
                    }
                }
            }

            throw new PrefineryException("Unspecified error");
        }

        /// <summary>
        /// Replaces values in one <see cref="T:Compulsivio.Prefinery.Tester"/> with the values from another.
        /// </summary>
        /// <param name="tester">The <see cref="T:Compulsivio.Prefinery.Tester"/> to be overwritten.</param>
        /// <param name="temp">The <see cref="T:Compulsivio.Prefinery.Tester"/> whose values will be used to overwrite <paramref name="tester"/>.</param>
        private void ReplaceTesterWithTemp(Tester tester, Tester temp)
        {
            // use a temporary and copy details into tester, yay for classes being by ref
            tester.Id = temp.Id;
            tester.InviteCode = temp.InviteCode;
            tester.Status = temp.Status;
            tester.Email = temp.Email;

            foreach (var pair in temp.Profile)
            {
                tester.Profile[pair.Key] = pair.Value;
            }
        }
    }
}
