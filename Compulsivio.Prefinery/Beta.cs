using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Compulsivio.Prefinery
{
    /// <summary>
    /// A beta whose testers are managed by Prefinery.
    /// </summary>
    public class Beta : IBeta
    {
        #region IBeta Members

        /// <summary>
        /// Gets the identification number of the beta.
        /// </summary>
        public int Id { get; internal set; }

        /// <summary>
        /// Gets or sets a user-identifiable name for the beta.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets the decode key for comparing e-mails and invite codes.
        /// </summary>
        public string DecodeKey { get; internal set; }

        /// <summary>
        /// Gets or sets the backing store for the beta.
        /// </summary>
        internal PrefineryCore Repository { get; set; }

        #endregion

        #region ITesterRepository Members

        /// <summary>
        /// Find a tester in this beta with a given id.
        /// </summary>
        /// <param name="id">The identification number of the tester.</param>
        /// <returns>An <see cref="T:Compulsivio.Prefinery.ITester"/> representing the tester.</returns>
        public ITester GetTester(int id)
        {
            return this.Repository.GetTester(this, id);
        }

        /// <summary>
        /// Find a tester in this beta with a given e-mail address.
        /// </summary>
        /// <param name="email">The e-mail address of the tester.</param>
        /// <returns>An <see cref="T:Compulsivio.Prefinery.ITester"/> representing the tester.</returns>
        public ITester GetTester(string email)
        {
            return this.Repository.GetTester(this, email);
        }

        /// <summary>
        /// Get a list of all testers in this beta.
        /// </summary>
        /// <returns>An enumerable list of testers.</returns>
        public IEnumerable<ITester> GetTesters()
        {
            return this.Repository.GetTesters(this) as IEnumerable<ITester>;
        }

        /// <summary>
        /// Add a tester to this beta.
        /// </summary>
        /// <param name="tester">The <see cref="T:Compulsivio.Prefinery.ITester"/> representing the tester.</param>
        public void AddTester(ITester tester)
        {
            this.Repository.AddTester(this, tester);
        }

        /// <summary>
        /// Send changes to an existing tester to Prefinery.
        /// </summary>
        /// <param name="tester">The <see cref="T:Compulsivio.Prefinery.ITester"/> representing the tester.</param>
        public void UpdateTester(ITester tester)
        {
            if (tester.Beta != this)
            {
                throw new ArgumentException("Tester not associated with this beta");
            }

            this.Repository.UpdateTester(tester);
        }

        /// <summary>
        /// Remove a tester from this beta.
        /// </summary>
        /// <param name="tester">The <see cref="T:Compulsivio.Prefinery.ITester"/> representing the tester.</param>
        public void DeleteTester(ITester tester)
        {
            if (tester.Beta != this)
            {
                throw new ArgumentException("Tester not associated with this beta");
            }

            this.Repository.DeleteTester(tester);
        }

        #endregion

        /// <summary>
        /// Check if a given invite code is valid for a given e-mail address.
        /// </summary>
        /// <param name="email">The e-mail address provided.</param>
        /// <param name="invite">The invite code provided.</param>
        /// <returns><value>true</value> if the invite code is valid; <value>false</value> otherwise.</returns>
        /// <remarks>
        /// If this function returns false, it's possible that the invite code is valid. This function does not
        /// contact Prefinery for its check, and is only useful as a shortcut if you are not using any special
        /// invite codes, but rather just those generated by Prefinery itself.
        /// </remarks>
        /// <exception cref="T:System.ArgumentNullException">No e-mail address provided.</exception>
        /// <exception cref="T:System.ArgumentNullException">No invite code provided.</exception>
        public bool IsValidInviteCode(string email, string invite)
        {
            if (string.IsNullOrEmpty(email))
            {
                throw new ArgumentNullException("email");
            }

            if (string.IsNullOrEmpty(invite))
            {
                throw new ArgumentNullException("invite");
            }

            return this.EncodeEmail(email).Equals(invite);
        }

        /// <summary>
        /// Encode an e-mail address for comparing against an invite code.
        /// </summary>
        /// <param name="email">The e-mail address to encode.</param>
        /// <returns>A SHA1 hash created from the e-mail address and the beta decode key.</returns>
        private string EncodeEmail(string email)
        {
            var encoder = new ASCIIEncoding();
            var sha1 = System.Security.Cryptography.SHA1.Create();

            var bytes = encoder.GetBytes(this.DecodeKey + email.ToLower());

            var rightCode = new StringBuilder(42);
            foreach (var b in sha1.ComputeHash(bytes))
            {
                rightCode.Append(b.ToString("X2"));
            }

            return rightCode.ToString();
        }
    }
}
